{"ast":null,"code":"var _jsxFileName = \"/home/mint/Escritorio/e-comerce/src/components/cart/CartContex.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\";\nimport \"./cart.css\";\n/* Creamos el context, se le puede pasar un valor inicial */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n\n  /* Creamos un estado para el carrito */\n  const [cartItems, setCartItems] = useState(() => {\n    try {\n      /* Verificamos si hay productos en el local storage,\n      si hay algo lo parseamos porque se guarda como string \n      y si no hay nada devolvemos un array vacio */\n      const productosEnLocalStorage = localStorage.getItem(\"cartProducts\");\n      return productosEnLocalStorage ? JSON.parse(productosEnLocalStorage) : [];\n    } catch (error) {\n      return [];\n    }\n  });\n  /* Cada vez que se actualize el carrito seteamos el local storage para guardar los productos */\n\n  useEffect(() => {\n    localStorage.setItem(\"cartProducts\", JSON.stringify(cartItems));\n    console.log(cartItems);\n  }, [cartItems]);\n  /* Creamos la funcion para agregar productos al carrito */\n\n  const AddItemToCart = product => {\n    /* Recibimos un producto y nos fijamos si ya esta en el carrito */\n    const inCart = cartItems.find(productInCart => productInCart.id === product.id);\n    /* Si el producto se encuentra en el carrito, recorremos el carrito\n    y al producto le sumamos uno a la cantidad, sino retornamos el carrito como estaba */\n\n    if (inCart) {\n      setCartItems(cartItems.map(productInCart => {\n        if (productInCart.id === product.id) {\n          return { ...inCart,\n            amount: inCart.amount + 1\n          };\n        } else return productInCart;\n      }));\n      /* Si el producto no se encuentra al carrito, lo agregamos y dejamos en uno la cantidad */\n    } else {\n      setCartItems([...cartItems, { ...product,\n        amount: 1\n      }]);\n    }\n  };\n  /* Creamos la funcion para borrar productos del carrito */\n\n\n  const DeleteItemToCart = productId => {\n    /* Buscamos el producto con su id */\n    const inCart = cartItems.find(productInCart => productInCart.id === productId);\n    /* Si la cantidad del producto es igual a 1, filtramos el carrito y lo sacamos */\n\n    if (inCart.amount === 1) {\n      setCartItems(cartItems.filter(productInCart => productInCart.id !== productId));\n    } else {\n      /* Si la cantidad es mayor a 1, recorremos el carrito\n      y al producto le restamos uno en su cantidad, sino devolvemos el carrito como estaba */\n      setCartItems(cartItems.map(productInCart => {\n        if (productInCart.id === productId) {\n          return { ...inCart,\n            amount: inCart.amount - 1\n          };\n        } else return productInCart;\n      }));\n    }\n  };\n\n  return (\n    /*#__PURE__*/\n\n    /* Envolvemos el children con el provider y le pasamos un objeto con las propiedades que necesitamos por value */\n    _jsxDEV(CartContext.Provider, {\n      value: {\n        cartItems,\n        AddItemToCart,\n        DeleteItemToCart\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(CartProvider, \"StUtigyDMGwrF+sAT76DcL7ivFM=\");\n\n_c = CartProvider;\nexport default CartContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/mint/Escritorio/e-comerce/src/components/cart/CartContex.jsx"],"names":["createContext","useEffect","useState","CartContext","CartProvider","children","cartItems","setCartItems","productosEnLocalStorage","localStorage","getItem","JSON","parse","error","setItem","stringify","console","log","AddItemToCart","product","inCart","find","productInCart","id","map","amount","DeleteItemToCart","productId","filter"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAO,YAAP;AAEA;;;AACA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,EAAjC;AAEP,OAAO,MAAMI,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;;AAC5C;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,MAAM;AAC/C,QAAI;AACF;AACN;AACA;AACM,YAAMM,uBAAuB,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAhC;AACA,aAAOF,uBAAuB,GAAGG,IAAI,CAACC,KAAL,CAAWJ,uBAAX,CAAH,GAAyC,EAAvE;AACD,KAND,CAME,OAAOK,KAAP,EAAc;AACd,aAAO,EAAP;AACD;AACF,GAVyC,CAA1C;AAYA;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACK,OAAb,CAAqB,cAArB,EAAqCH,IAAI,CAACI,SAAL,CAAeT,SAAf,CAArC;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYX,SAAZ;AACD,GAHQ,EAGN,CAACA,SAAD,CAHM,CAAT;AAKA;;AACA,QAAMY,aAAa,GAAIC,OAAD,IAAa;AACjC;AACA,UAAMC,MAAM,GAAGd,SAAS,CAACe,IAAV,CACZC,aAAD,IAAmBA,aAAa,CAACC,EAAd,KAAqBJ,OAAO,CAACI,EADnC,CAAf;AAIA;AACJ;;AACI,QAAIH,MAAJ,EAAY;AACVb,MAAAA,YAAY,CACVD,SAAS,CAACkB,GAAV,CAAeF,aAAD,IAAmB;AAC/B,YAAIA,aAAa,CAACC,EAAd,KAAqBJ,OAAO,CAACI,EAAjC,EAAqC;AACnC,iBAAO,EAAE,GAAGH,MAAL;AAAaK,YAAAA,MAAM,EAAEL,MAAM,CAACK,MAAP,GAAgB;AAArC,WAAP;AACD,SAFD,MAEO,OAAOH,aAAP;AACR,OAJD,CADU,CAAZ;AAOA;AACD,KATD,MASO;AACLf,MAAAA,YAAY,CAAC,CAAC,GAAGD,SAAJ,EAAe,EAAE,GAAGa,OAAL;AAAcM,QAAAA,MAAM,EAAE;AAAtB,OAAf,CAAD,CAAZ;AACD;AACF,GApBD;AAsBA;;;AACA,QAAMC,gBAAgB,GAAIC,SAAD,IAAe;AACtC;AACA,UAAMP,MAAM,GAAGd,SAAS,CAACe,IAAV,CACZC,aAAD,IAAmBA,aAAa,CAACC,EAAd,KAAqBI,SAD3B,CAAf;AAIA;;AACA,QAAIP,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;AACvBlB,MAAAA,YAAY,CACVD,SAAS,CAACsB,MAAV,CAAkBN,aAAD,IAAmBA,aAAa,CAACC,EAAd,KAAqBI,SAAzD,CADU,CAAZ;AAGD,KAJD,MAIO;AACL;AACN;AACMpB,MAAAA,YAAY,CACVD,SAAS,CAACkB,GAAV,CAAeF,aAAD,IAAmB;AAC/B,YAAIA,aAAa,CAACC,EAAd,KAAqBI,SAAzB,EAAoC;AAClC,iBAAO,EAAE,GAAGP,MAAL;AAAaK,YAAAA,MAAM,EAAEL,MAAM,CAACK,MAAP,GAAgB;AAArC,WAAP;AACD,SAFD,MAEO,OAAOH,aAAP;AACR,OAJD,CADU,CAAZ;AAOD;AACF,GAtBD;;AAwBA;AAAA;;AACE;AACA,YAAC,WAAD,CAAa,QAAb;AACE,MAAA,KAAK,EAAE;AAAEhB,QAAAA,SAAF;AAAaY,QAAAA,aAAb;AAA4BQ,QAAAA;AAA5B,OADT;AAAA,gBAGGrB;AAHH;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,CA5EM;;GAAMD,Y;;KAAAA,Y;AA8Eb,eAAeD,WAAf","sourcesContent":["import { createContext, useEffect, useState } from \"react\";\nimport \"./cart.css\"\n\n/* Creamos el context, se le puede pasar un valor inicial */\nexport const CartContext = createContext();\n\nexport const CartProvider = ({ children }) => {\n  /* Creamos un estado para el carrito */\n  const [cartItems, setCartItems] = useState(() => {\n    try {\n      /* Verificamos si hay productos en el local storage,\n      si hay algo lo parseamos porque se guarda como string \n      y si no hay nada devolvemos un array vacio */\n      const productosEnLocalStorage = localStorage.getItem(\"cartProducts\");\n      return productosEnLocalStorage ? JSON.parse(productosEnLocalStorage) : [];\n    } catch (error) {\n      return [];\n    }\n  });\n\n  /* Cada vez que se actualize el carrito seteamos el local storage para guardar los productos */\n  useEffect(() => {\n    localStorage.setItem(\"cartProducts\", JSON.stringify(cartItems));\n    console.log(cartItems)\n  }, [cartItems]);\n\n  /* Creamos la funcion para agregar productos al carrito */\n  const AddItemToCart = (product) => {\n    /* Recibimos un producto y nos fijamos si ya esta en el carrito */\n    const inCart = cartItems.find(\n      (productInCart) => productInCart.id === product.id\n    );\n\n    /* Si el producto se encuentra en el carrito, recorremos el carrito\n    y al producto le sumamos uno a la cantidad, sino retornamos el carrito como estaba */\n    if (inCart) {\n      setCartItems(\n        cartItems.map((productInCart) => {\n          if (productInCart.id === product.id) {\n            return { ...inCart, amount: inCart.amount + 1 };\n          } else return productInCart;\n        })\n      );\n      /* Si el producto no se encuentra al carrito, lo agregamos y dejamos en uno la cantidad */\n    } else {\n      setCartItems([...cartItems, { ...product, amount: 1 }]);\n    }\n  };\n\n  /* Creamos la funcion para borrar productos del carrito */\n  const DeleteItemToCart = (productId) => {\n    /* Buscamos el producto con su id */\n    const inCart = cartItems.find(\n      (productInCart) => productInCart.id === productId\n    );\n\n    /* Si la cantidad del producto es igual a 1, filtramos el carrito y lo sacamos */\n    if (inCart.amount === 1) {\n      setCartItems(\n        cartItems.filter((productInCart) => productInCart.id !== productId)\n      );\n    } else {\n      /* Si la cantidad es mayor a 1, recorremos el carrito\n      y al producto le restamos uno en su cantidad, sino devolvemos el carrito como estaba */\n      setCartItems(\n        cartItems.map((productInCart) => {\n          if (productInCart.id === productId) {\n            return { ...inCart, amount: inCart.amount - 1 };\n          } else return productInCart;\n        })\n      );\n    }\n  };\n\n  return (\n    /* Envolvemos el children con el provider y le pasamos un objeto con las propiedades que necesitamos por value */\n    <CartContext.Provider\n      value={{ cartItems, AddItemToCart, DeleteItemToCart }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartContext;"]},"metadata":{},"sourceType":"module"}